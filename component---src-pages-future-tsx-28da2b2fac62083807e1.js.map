{"version":3,"file":"component---src-pages-future-tsx-28da2b2fac62083807e1.js","mappings":"oLAUO,SAASA,EAAmB,GAAwF,IAAxF,eAAEC,EAAc,iBAAEC,EAAgB,WAAEC,EAAU,WAAEC,GAAqC,EACtH,OACEC,EAAAA,EAAAA,IAACC,EAAAA,EAAM,CACLC,KAAK,qBACLC,KAAKA,EAAAA,EAAAA,IAAG,sDAIcP,EAAiB,KAAO,IAAG,YAAYC,EAAmB,KAAO,IAAG,sBACpED,EAAiBG,EAAaD,EAAU,2CAIvCF,EAAiBE,EAAaC,EAAU,0CAMrE,CClBO,SAASK,EAAe,GAA2F,IAA3F,SAAEC,EAAQ,eAAET,EAAc,iBAAEC,EAAgB,WAAEC,EAAU,WAAEC,EAAU,UAAEO,GAAkB,EACrH,OACEN,EAAAA,EAAAA,IAACO,EAAAA,SAAQ,MACPP,EAAAA,EAAAA,IAAAA,UAAAA,CAASM,UAAWA,GAAYD,IAChCL,EAAAA,EAAAA,IAACL,EAAkB,CAACC,eAAgBA,EAAgBC,iBAAkBA,EAAkBC,WAAYA,EAAYC,WAAYA,IAGlI,C,oHCZA,MAAMS,EAAkCC,IAAiBN,EAAAA,EAAAA,IAAG,uDAGvCM,EAAMC,UAAUC,OAAM,wBACnBF,EAAMC,UAAUC,OAAM,6FAmB9C,SAASC,EAAe,GAAiD,IAAjD,QAAEC,EAAO,KAAEC,GAAmC,EACpE,MAAML,GAAQM,EAAAA,EAAAA,KACd,OACEf,EAAAA,EAAAA,IAACI,EAAAA,EAAc,CAACN,WAAYW,EAAMO,gBAAiBjB,WAAYU,EAAMQ,WAAYd,IAAKK,IACpFR,EAAAA,EAAAA,IAACkB,EAAAA,cAAa,CAACC,GAAIL,IACjBd,EAAAA,EAAAA,IAACoB,EAAAA,EAAK,CAACC,SAAU,MAChBR,GAIT,CAEA,SAASS,EAAgB,GAAiD,IAAjD,QAAET,EAAO,KAAEC,GAAmC,EACrE,OACEd,EAAAA,EAAAA,IAAAA,UAAAA,CAASG,IAAKK,IACZR,EAAAA,EAAAA,IAACkB,EAAAA,cAAa,CAACC,GAAIL,GAChBD,GACDb,EAAAA,EAAAA,IAACoB,EAAAA,EAAK,OAId,CAOO,SAASG,EAAwB,GAAyC,IAAzC,SAAElB,EAAQ,QAAEmB,EAAO,SAAEC,GAAiB,EAC5E,OACEzB,EAAAA,EAAAA,IAACO,EAAAA,SAAQ,MACPP,EAAAA,EAAAA,IAACY,EAAc,CAACC,QAASW,EAAQX,QAASC,KAAMU,EAAQV,OACvDT,GACDL,EAAAA,EAAAA,IAACsB,EAAe,CAACT,QAASY,EAASZ,QAASC,KAAMW,EAASX,OAGjE,C,kIC3DA,MAAMY,EAAuBjB,IAAiBN,EAAAA,EAAAA,IAAG,oBAC3BM,EAAMQ,WAAU,0BAItC,SAASU,IACP,MAAMlB,GAAQM,EAAAA,EAAAA,KACd,OACEf,EAAAA,EAAAA,IAACI,EAAAA,EAAc,CAACN,WAAYW,EAAMQ,WAAYlB,WAAYU,EAAMO,gBAAiBpB,gBAAc,EAACO,IAAKuB,GAAoB,+BAI7H,CAEe,SAASE,IACtB,MAAMC,GAAOC,EAAAA,EAAAA,KACb,OACE9B,EAAAA,EAAAA,IAAC+B,EAAAA,EAAa,MACZ/B,EAAAA,EAAAA,IAACuB,EAAAA,EAAuB,CACtBC,QAAS,CAAEV,KAAM,IAAKD,QAASgB,EAAKG,cAAc,CAAEC,GAAI,wBACxDR,SAAU,CAAEX,KAAM,WAAYD,QAASgB,EAAKG,cAAc,CAAEC,GAAI,yBAEhEjC,EAAAA,EAAAA,IAAC2B,EAAc,OAIvB,C","sources":["webpack://openscript.ch/./src/components/SingleColorDivider.tsx","webpack://openscript.ch/./src/components/DividedSection.tsx","webpack://openscript.ch/./src/components/ForwardBackwardSections.tsx","webpack://openscript.ch/./src/pages/future.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { Sprite } from './Sprite';\n\ntype SingleColorDividerProps = {\n  upperColor: string;\n  lowerColor: string;\n  flipVertically?: boolean;\n  flipHorizontally?: boolean;\n};\n\nexport function SingleColorDivider({ flipVertically, flipHorizontally, upperColor, lowerColor }: SingleColorDividerProps) {\n  return (\n    <Sprite\n      name=\"singleColorDivider\"\n      css={css`\n        width: 100%;\n        height: auto;\n        z-index: 10;\n        transform: scaleY(${flipVertically ? '-1' : '1'}) scaleX(${flipHorizontally ? '-1' : '1'});\n        background-color: ${flipVertically ? lowerColor : upperColor};\n        margin-bottom: -1px; // anti aliasing bottom gap fix\n\n        use {\n          --divider-color: ${flipVertically ? upperColor : lowerColor};\n          transform: translateY(1px); // anti aliasing bottom gap fix\n        }\n      `}\n    />\n  );\n}\n","import { Fragment, PropsWithChildren } from 'react';\nimport { SingleColorDivider } from './SingleColorDivider';\n\ntype Props = PropsWithChildren<{\n  upperColor: string;\n  lowerColor: string;\n  flipVertically?: boolean;\n  flipHorizontally?: boolean;\n  className?: string;\n}>;\n\nexport function DividedSection({ children, flipVertically, flipHorizontally, upperColor, lowerColor, className }: Props) {\n  return (\n    <Fragment>\n      <section className={className}>{children}</section>\n      <SingleColorDivider flipVertically={flipVertically} flipHorizontally={flipHorizontally} upperColor={upperColor} lowerColor={lowerColor} />\n    </Fragment>\n  );\n}\n","import { css, Theme, useTheme } from '@emotion/react';\nimport { Fragment, PropsWithChildren } from 'react';\nimport { LocalizedLink } from 'gatsby-plugin-i18n-l10n';\nimport { DividedSection } from './DividedSection';\nimport { Arrow } from './Arrow';\n\nconst forwardAndBackwardSectionStyle = (theme: Theme) => css`\n  display: flex;\n  justify-content: center;\n  padding-top: var(${theme.variables.gutter});\n  padding-bottom: var(${theme.variables.gutter});\n\n  a {\n    display: flex;\n    flex-direction: column;\n  }\n\n  svg {\n    margin: 1rem;\n    height: 2rem;\n    width: auto;\n  }\n`;\n\ntype ForwardBackwardSectionProps = {\n  message: string;\n  path: string;\n};\n\nfunction ForwardSection({ message, path }: ForwardBackwardSectionProps) {\n  const theme = useTheme();\n  return (\n    <DividedSection upperColor={theme.backgroundColor} lowerColor={theme.whiteColor} css={forwardAndBackwardSectionStyle}>\n      <LocalizedLink to={path}>\n        <Arrow rotation={180} />\n        {message}\n      </LocalizedLink>\n    </DividedSection>\n  );\n}\n\nfunction BackwardSection({ message, path }: ForwardBackwardSectionProps) {\n  return (\n    <section css={forwardAndBackwardSectionStyle}>\n      <LocalizedLink to={path}>\n        {message}\n        <Arrow />\n      </LocalizedLink>\n    </section>\n  );\n}\n\ntype Props = PropsWithChildren<{\n  forward: ForwardBackwardSectionProps;\n  backward: ForwardBackwardSectionProps;\n}>;\n\nexport function ForwardBackwardSections({ children, forward, backward }: Props) {\n  return (\n    <Fragment>\n      <ForwardSection message={forward.message} path={forward.path} />\n      {children}\n      <BackwardSection message={backward.message} path={backward.path} />\n    </Fragment>\n  );\n}\n","import { css, Theme, useTheme } from '@emotion/react';\nimport { useIntl } from 'react-intl';\nimport { DividedSection } from '../components/DividedSection';\nimport { ForwardBackwardSections } from '../components/ForwardBackwardSections';\nimport { DefaultLayout } from '../layouts/DefaultLayout';\n\nconst contentSectionStyle = (theme: Theme) => css`\n  background-color: ${theme.whiteColor};\n  flex-grow: 1;\n`;\n\nfunction ContentSection() {\n  const theme = useTheme();\n  return (\n    <DividedSection upperColor={theme.whiteColor} lowerColor={theme.backgroundColor} flipVertically css={contentSectionStyle}>\n      Eine Baustelle.. sag ich ja.\n    </DividedSection>\n  );\n}\n\nexport default function FuturePage() {\n  const intl = useIntl();\n  return (\n    <DefaultLayout>\n      <ForwardBackwardSections\n        forward={{ path: '/', message: intl.formatMessage({ id: 'menu.togetherAhead' }) }}\n        backward={{ path: '/present', message: intl.formatMessage({ id: 'menu.toThePresent' }) }}\n      >\n        <ContentSection />\n      </ForwardBackwardSections>\n    </DefaultLayout>\n  );\n}\n"],"names":["SingleColorDivider","flipVertically","flipHorizontally","upperColor","lowerColor","___EmotionJSX","Sprite","name","css","DividedSection","children","className","Fragment","forwardAndBackwardSectionStyle","theme","variables","gutter","ForwardSection","message","path","useTheme","backgroundColor","whiteColor","LocalizedLink","to","Arrow","rotation","BackwardSection","ForwardBackwardSections","forward","backward","contentSectionStyle","ContentSection","FuturePage","intl","useIntl","DefaultLayout","formatMessage","id"],"sourceRoot":""}