---
import Sprite from "./Sprite.astro";
---

<div class="carousel">
  <div class="carousel-viewport">
    <div class="carousel-container">
      <slot />
    </div>
  </div>
  {
    Astro.slots.has("overlay") && (
      <div class="carousel-overlay">
        <slot name="overlay" />
      </div>
    )
  }
  <button class="carousel-button prev" aria-label="Previous Slide">
    <Sprite name="arrow" />
  </button>
  <button class="carousel-button next" aria-label="Next Slide">
    <Sprite name="arrow" />
  </button>
</div>

<style>
  @property --size-carousel-buttons {
    syntax: "<length>";
    inherits: true;
    initial-value: 2rem;
  }

  .carousel {
    position: relative;
    margin: calc(var(--size-height-divider) * -1) 0;
  }

  .carousel-overlay {
    position: absolute;
    inset: 0;
    pointer-events: none;
    padding: 0 calc(var(--size-carousel-buttons) + var(--size-gutter-big));

    > *:not(.active) {
      display: none;
    }
  }

  .carousel-viewport {
    overflow: hidden;
    height: 100%;
  }

  .carousel-container {
    display: flex;
    height: 100%;
  }

  .carousel-container > :global(*) {
    flex: 0 0 100%;
    min-width: 0;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    z-index: 5;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    cursor: pointer;
    width: var(--size-carousel-buttons);
    height: var(--size-carousel-buttons);

    svg {
      width: 100%;
      height: 100%;
      fill: var(--color-secondary);
    }

    &.prev {
      left: 0;

      svg {
        rotate: 0.25turn;
      }
    }

    &.next {
      right: 0;

      svg {
        rotate: 0.75turn;
      }
    }
  }
</style>

<script>
  import type { EmblaOptionsType } from "embla-carousel";
  import EmblaCarousel from "embla-carousel";
  import Autoplay from "embla-carousel-autoplay";
  import ClassNames from "embla-carousel-class-names";

  function register() {
    const emblas = document.querySelectorAll(".carousel") as NodeListOf<HTMLElement>;
    if (!emblas) throw new Error("No Embla node not found");

    emblas.forEach((embla) => {
      const emblaViewport = embla.querySelector(".carousel-viewport") as HTMLElement;
      const options: EmblaOptionsType = { loop: true };
      const plugins = [Autoplay({ delay: 10000 }), ClassNames()];
      const emblaApi = EmblaCarousel(emblaViewport, options, plugins);

      const updateActiveOverlay = () => {
        const slide = emblaApi.selectedScrollSnap();
        const overlay = embla.querySelector(`[data-slide-id="${slide}"]`) as HTMLElement;
        overlay?.classList.add("active");
        const overlays = embla.querySelectorAll(".carousel-overlay [data-slide-id]") as NodeListOf<HTMLElement>;
        overlays.forEach((o) => {
          if (o !== overlay) o.classList.remove("active");
        });
      };

      if (embla.querySelector(".carousel-overlay")) {
        updateActiveOverlay();
        emblaApi.on("select", () => {
          updateActiveOverlay();
        });
      }

      const prevButton = embla.querySelector(".carousel-button.prev") as HTMLElement;
      const nextButton = embla.querySelector(".carousel-button.next") as HTMLElement;
      prevButton.addEventListener("click", () => emblaApi.scrollPrev(), false);
      nextButton.addEventListener("click", () => emblaApi.scrollNext(), false);
    });
  }

  register();
  document.addEventListener("astro:after-swap", register);
</script>
