---
type Props = {
  flipVertical?: boolean;
  flipHorizontal?: boolean;
  kind?: "multi" | "single";
  firstSegmentColor?: string;
  secondSegmentColor?: string;
  height?: string;
};

const {
  flipVertical = false,
  flipHorizontal = false,
  kind = "single",
  firstSegmentColor = "",
  secondSegmentColor = "",
  height = "",
} = Astro.props;

const style = `transform: scaleX(${flipHorizontal ? -1 : 1}) scaleY(${flipVertical ? -1 : 1})${flipVertical ? "; margin-block-end: -1px;" : ""}`;
---

<style define:vars={{ firstSegmentColor, secondSegmentColor, height }}>
  svg {
    --first-segment: var(--firstSegmentColor, var(--color-primary));
    --second-segment: var(--secondSegmentColor, var(--color-primary-110));
    width: 100%;
    min-height: 1.5rem;
    max-height: var(--height, var(--size-height-divider));
  }
</style>

{
  kind === "single" ? (
    <svg viewBox="0 0 100 100" preserveAspectRatio="none" style={style} class="divider">
      <path style="fill: var(--first-segment);" d="M100,100 L83.5,0 L0,100 Z" />
    </svg>
  ) : null
}
{
  kind === "multi" ? (
    <svg viewBox="0 0 100 100" preserveAspectRatio="none" style={style} class="divider">
      <path fill="var(--second-segment)" d="M100,100 L17.5,20 L0,100 L0,0 L17.5,0 L100,0 L100,100 Z" />
      <path fill="var(--first-segment)" d="M17.5,0 L0,80 L0,0 L17.5,0 Z" />
    </svg>
  ) : null
}
