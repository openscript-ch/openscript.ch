---
import { currentLocale } from "astro-nanostores-i18n:runtime";
import { getCollection } from "astro:content";
import Sprite from "../../components/Sprite.astro";
import SpriteData from "../../../res/sprite/sprite.json";

type Props = {
  class?: string;
};

const { class: className } = Astro.props;
const locale = currentLocale.get();
const technologies = await getCollection("technologies", (entry) => entry.data.locale === locale);

const randomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;
---

<section class:list={[className, "page-padding"]}>
  <header>
    <slot name="title" />
  </header>
  <div class="tools-grid">
    {
      technologies.map(({ data: item }) => (
        <a
          href={item.url}
          aria-label={typeof item.label === "string" ? item.label : ""}
          style={`rotate: ${randomNumber(-45, 45)}deg`}
        >
          <Sprite name={item.logo as keyof typeof SpriteData} />
        </a>
      ))
    }
  </div>
  <div class="tools-content">
    <slot />
    <Sprite name="arrow" />
  </div>
</section>

<style>
  section {
    display: grid;
    grid-template-areas: "header header" "tools main";
    grid-template-columns: 2fr minmax(20rem, 1fr);
    z-index: 1;
    gap: var(--size-gutter-big);
  }

  header {
    grid-area: header;
    margin-block-end: var(--size-gutter-big);
  }

  :where(.tools-grid) {
    grid-area: tools;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
    align-items: center;
    gap: var(--size-gutter-big);
    margin-bottom: var(--size-gutter-big);

    a {
      transition: 0.3s;
    }

    a:hover {
      rotate: 0deg !important;
    }

    svg {
      width: 4rem;
      height: auto;
      color: var(--color-white);
    }
  }

  :where(.tools-content) {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    grid-area: main;
    padding: var(--size-gutter-big);
    background-color: var(--color-white);
    font-size: 1.125rem;

    svg {
      margin-block-start: var(--size-gutter-big);
      width: 4rem;
      height: auto;
      fill: var(--color-secondary);
      rotate: 120deg;
    }

    p {
      margin: 0;
    }
  }

  @media screen and (max-width: 800px) {
    section {
      grid-template-areas:
        "header"
        "main"
        "tools";
      grid-template-columns: 1fr;
    }

    .tools-content {
      svg {
        align-self: center;
        rotate: 0deg;
      }
    }

    .tools-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media screen and (max-width: 600px) {
    .tools-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>
