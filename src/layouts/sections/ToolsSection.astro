---
import Sprite from "../../components/Sprite.astro";
import SpriteData from "../../../res/sprite/sprite.json";

type LogoItem = {
  logo: keyof typeof SpriteData;
  url: string;
  label: string;
};

const logos: LogoItem[] = [
  {
    logo: "logo-astro",
    url: "https://astro.build",
    label: "Astro - The web framework for content-driven sites",
  },
  {
    logo: "logo-css",
    url: "https://www.w3.org/Style/CSS/Overview.en.html",
    label: "CSS - Cascading Style Sheets for styling the web",
  },
  {
    logo: "logo-docker",
    url: "https://www.docker.com",
    label: "Docker - Develop, ship, and run applications in containers",
  },
  {
    logo: "logo-forgejo",
    url: "https://forgejo.org",
    label: "Forgejo - Beyond coding. We forge.",
  },
  {
    logo: "logo-graphql",
    url: "https://graphql.org",
    label: "GraphQL - A query language for your API",
  },
  {
    logo: "logo-html5",
    url: "https://developer.mozilla.org/en-US/docs/Web/HTML",
    label: "HTML5 - The standard markup language for the web",
  },
  {
    logo: "logo-kubernetes",
    url: "https://kubernetes.io",
    label: "Kubernetes - Production-grade container orchestration",
  },
  {
    logo: "logo-mantine",
    url: "https://mantine.dev",
    label: "Mantine - React components and hooks library",
  },
  {
    logo: "logo-nestjs",
    url: "https://nestjs.com",
    label: "NestJS - A progressive Node.js framework",
  },
  {
    logo: "logo-php",
    url: "https://www.php.net",
    label: "PHP - Popular general-purpose scripting language",
  },
  {
    logo: "logo-postgresql",
    url: "https://www.postgresql.org",
    label: "PostgreSQL - The world's most advanced open-source database",
  },
  {
    logo: "logo-react",
    url: "https://react.dev",
    label: "React - A JavaScript library for building user interfaces",
  },
  {
    logo: "logo-ruby",
    url: "https://www.ruby-lang.org",
    label: "Ruby - A dynamic, open-source programming language",
  },
  {
    logo: "logo-rubyonrails",
    url: "https://rubyonrails.org",
    label: "Ruby on Rails - A web application framework for Ruby",
  },
  {
    logo: "logo-supabase",
    url: "https://supabase.com",
    label: "Supabase - Open-source Firebase alternative",
  },
  {
    logo: "logo-typescript",
    url: "https://www.typescriptlang.org",
    label: "TypeScript - JavaScript with syntax for types",
  },
];

const randomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;
---

<section>
  <header>
    <slot name="title" />
  </header>
  <div class="tools-grid">
    {
      logos.map((item) => (
        <a href={item.url} aria-label={item.label} style={`rotate: ${randomNumber(-45, 45)}deg`}>
          <Sprite name={item.logo} />
        </a>
      ))
    }
  </div>
  <div class="tools-content">
    <slot />
    <Sprite name="arrow" />
  </div>
</section>

<style>
  section {
    display: grid;
    grid-template-areas: "header header" "tools main";
    grid-template-columns: 2fr minmax(20rem, 1fr);
    background-color: var(--color-background);
    padding: var(--size-gutter-big) var(--size-page-padding) 8rem var(--size-page-padding);
    z-index: 1;
    gap: var(--size-gutter-big);
  }

  header {
    grid-area: header;
    text-align: center;
    margin-block-end: var(--size-gutter-big);
  }

  :where(.tools-grid) {
    grid-area: tools;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
    align-items: center;
    gap: var(--size-gutter-big);
    margin-bottom: var(--size-gutter-big);

    a {
      transition: 0.3s;
    }

    a:hover {
      rotate: 0deg !important;
    }

    svg {
      width: 4rem;
      height: auto;
      color: var(--color-white);
    }
  }

  :where(.tools-content) {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    grid-area: main;
    padding: var(--size-gutter-big);
    background-color: var(--color-white);
    font-size: 1.125rem;

    svg {
      width: 4rem;
      height: auto;
      fill: var(--color-secondary);
      rotate: 120deg;
    }

    p {
      margin: 0;
    }
  }

  @media screen and (max-width: 800px) {
    .tools-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>
